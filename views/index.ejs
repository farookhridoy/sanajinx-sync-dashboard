<!DOCTYPE html>
<html lang="en" dir="ltr">

<head>
    <title>SANAJINX</title>
    <meta charset="utf-8">
    <link rel="stylesheet" href="css/main.css">
    <meta name="viewport" content="width=device-width">
    <link rel="shortcut icon" type="image/png" href="https://i.ibb.co/ngc4n9L/w-removebg-preview-1.png">
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap@4.4.1/dist/css/bootstrap.min.css"
          integrity="sha384-Vkoo8x4CGsO3+Hhxv8T/Q5PaXtkKtu6ug5TOeNV6gBiFeWPGFN9MuhOf23Q9Ifjh" crossorigin="anonymous">
    <style>
        /* General Styling */
        body {
            font-family: Arial, sans-serif;
            background-color: #f4f4f4;
            margin: 0;
            padding: 0;
            color: #333;
        }

        .header {
            text-align: center;
            padding: 20px;
            background-color: #442f7d;
            color: white;
        }

        .header img {
            max-width: 135px;
            height: auto;
        }

        .telegram {
            position: absolute;
            top: 20px;
            right: 20px;
            color: white;
            font-size: 20px;
        }

        /* Tab Styles */
        .tabs {
            display: flex;
            justify-content: space-between; /* Distributes buttons to occupy full width */
            margin-bottom: 10px; /* Adjusted to position tabs higher */
            margin-top: 20px; /* Added margin to push tabs down */
            position: relative;
        }

        .tabs button {
            flex: 1; /* Makes buttons take equal space */
            background-color: #442f7d; /* Updated background color */
            color: white;
            padding: 25px; /* Adjust padding for button size */
            border: none;
            cursor: pointer;
            transition: background-color 0.3s, transform 0.2s;
            font-size: 18px;
            margin: 0; /* No margin to ensure full coverage */
            border-radius: 0; /* Remove rounded corners for full-width effect */
            font-weight: bold; /* Make text bold */
            text-align: center; /* Center the text */
            height: 70px; /* Set a fixed height for buttons */
        }

        .tabs button:hover {
            background-color: #4CAF50;
        }

        .tabs button.active {
            background-color: #4CAF50;
            transform: scale(1.05); /* Slightly enlarge active button */
            height: 70px; /* Ensure active button matches the height of non-active buttons */
            border-radius: 35px; /* Rounded corners for the active button */

        }

        .tabcontent {
            display: none;
            padding: 20px;
            animation: fadeEffect 1s;
        }

        @keyframes fadeEffect {
            from {
                opacity: 0;
            }

            to {
                opacity: 1;
            }
        }

        /* Table Styles */
        table {
            width: 100%;
            border-collapse: collapse;
            margin: 20px 0;
        }

        th,
        td {
            padding: 12px;
            text-align: left;
            border-bottom: 1px solid #ddd;
        }

        th {
            background-color: #442f7d;
            color: white;
        }

        tr:hover {
            background-color: #f1f1f1;
        }

        /* Button Styling */
        button {
            background-color: #442f7d;
            color: white;
            padding: 10px;
            border: none;
            border-radius: 5px;
            cursor: pointer;
        }

        button:hover {
            background-color: #4CAF50;
        }

        /* Chart Container */
        #pieChart {
            max-width: 600px;
            margin: 0 auto;
        }

        /* Responsive Design */
        @media screen and (max-width: 600px) {
            table,
            th,
            td {
                display: block;
                width: 100%;
                box-sizing: border-box;
            }

            th,
            td {
                text-align: right;
            }

            th {
                background-color: #442f7d;
                color: white;
                padding: 10px;
            }
        }

        /* Search Bar */
        #searchInput {
            width: 100%;
            padding: 12px;
            margin: 12px 10px 12px 0;
            box-sizing: border-box;
            font-size: 16px;
        }

        /* Filter Dropdown */
        #filterSelect {
            padding: 12px;
            margin: 12px 0;
            font-size: 16px;
            width: auto;
        }

        /* Search Container */
        .search-container {
            display: flex;
            align-items: center;
            justify-content: flex-start;
        }
    </style>
</head>

<body>
<!-- Header Section -->
<div class="header">
    <img src="https://i.ibb.co/ngc4n9L/w-removebg-preview-1.png" alt="SANAJINX Logo">
    <h1>SANAJINX</h1>
    <div class="telegram">Telegram: @evilginx2</div>
</div>
<!-- Active Bar Section -->
<div class="active-bar" id="activeBar"></div>

<!-- Tabs Section -->
<div class="tabs">
    <button class="tablinks" onclick="openTab(event, 'Sessions')" id="defaultOpen">Sessions</button>
    <button class="tablinks" onclick="openTab(event, 'LiveChart')">Live</button>
</div>

<!-- Tab Content: Session Data Table -->
<div id="Sessions" class="tabcontent">
    <div class="search-container">
        <select id="filterSelect" onchange="searchTable()">
            <option value="all">All</option>
            <option value="session">Session</option>
            <option value="username">Username</option>
            <option value="ip">IP</option>
        </select>
        <input type="text" id="searchInput" onkeyup="searchTable()" placeholder="Search...">
    </div>
    <div class="table table-responsive">
        <table id="sessionTable">
            <tr>
                <th>Session</th>
                <th>Username</th>
                <th>Password</th>
                <th>User IP</th>
                <th>User Agent</th>
                <th>Time</th>
                <th>Cookies</th>
            </tr>
            <% data.sort((a, b) => b.id - a.id).map(item => { %> <!-- Sort sessions by descending ID -->

                <tr>
                    <td style="word-break: break-all; font-size: 90%; padding: 20px 10px;"><%= item.id %></td>
                    <td><%= item.username %></td>
                    <td><%= item.password %></td>
                    <td><%= item.remote_addr %></td>
                    <td><%= item.useragent %></td>
                    <td><%= JSON.stringify(new Date(item.create_time).toLocaleString()) %></td>
                    <td>
                        <button class="btn btn-success btn-sm" onclick="copyDetails(this)">
                            Copy Details
                            <span style="display: none"><%= JSON.stringify(item.custom) %></span>
                        </button>
                    </td>
                </tr>
            <% }) %>
        </table>
    </div>

</div>

<!-- Tab Content: Live Pie Chart -->
<div id="LiveChart" class="tabcontent">
    <div class="container">
        <div class="row">
            <div class="col-md-6">
                <div class="card">
                    <div class="card-header">
                        <h5>Cookie vs Session state </h5>
                    </div>
                    <div class="card-body">
                        <canvas id="myChart" style="max-height: 300px"></canvas>
                    </div>
                </div>
            </div>
            <div class="col-md-6">
                <div class="card">
                    <div class="card-header">
                        <h5>User Access Info State </h5>
                    </div>
                    <div class="card-body">
                        <canvas id="userPassPieChart" style="max-height: 300px"></canvas>
                    </div>
                </div>
            </div>

            <div class="col-md-12">
                <div class="card">
                    <div class="card-header">
                        <h5>IP Addresses by Country</h5>
                    </div>
                    <div class="card-body">
                        <div id="countryWiseIpCount" style=" width: 100%;
  height: 600px"></div>
                    </div>
                </div>
            </div>

        </div>

    </div>
</div>

<!-- JavaScript Section -->
<script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
<script src="https://cdn.amcharts.com/lib/5/index.js"></script>
<script src="https://cdn.amcharts.com/lib/5/map.js"></script>
<script src="https://cdn.amcharts.com/lib/5/geodata/worldLow.js"></script>
<script src="https://cdn.amcharts.com/lib/5/themes/Animated.js"></script>
<script>
    // Function to open tabs
    function openTab(evt, tabName) {
        let i, tabcontent, tablinks;
        tabcontent = document.getElementsByClassName("tabcontent");
        for (i = 0; i < tabcontent.length; i++) {
            tabcontent[i].style.display = "none";
        }
        tablinks = document.getElementsByClassName("tablinks");
        for (i = 0; i < tablinks.length; i++) {
            tablinks[i].className = tablinks[i].className.replace(" active", "");
        }
        // Move the active bar
        const activeBar = document.getElementById('activeBar');
        const buttonRect = evt.currentTarget.getBoundingClientRect();
        activeBar.style.width = buttonRect.width + 'px'; // Set the width to match the button
        activeBar.style.left = buttonRect.left - document.querySelector('.tabs').getBoundingClientRect().left + 'px'; // Position the active bar

        // Show the selected tab content
        document.getElementById(tabName).style.display = "block";
        evt.currentTarget.className += " active";
    }

    // Copy details button function
    function copyDetails(ele) {
        var input = document.createElement('textarea');
        input.innerHTML = ele.children[0].innerText;
        document.body.appendChild(input);
        input.select();
        document.execCommand('copy');
        document.body.removeChild(input);
        alert("Copied the text: " + ele.children[0].innerText);
    }

    // Set default open tab
    document.getElementById("defaultOpen").click();

    // Search table function
    function searchTable() {
        let input = document.getElementById("searchInput");
        let filter = input.value.toLowerCase();
        let filterSelect = document.getElementById("filterSelect").value;
        let table = document.getElementById("sessionTable");
        let tr = table.getElementsByTagName("tr");

        for (let i = 1; i < tr.length; i++) {
            let td = tr[i].getElementsByTagName("td");
            let rowContainsSearchText = false;

            for (let j = 0; j < td.length; j++) {
                if (filterSelect === "all" ||
                    (filterSelect === "session" && j === 0) ||
                    (filterSelect === "username" && j === 1) ||
                    (filterSelect === "ip" && j === 3)) {
                    if (td[j] && td[j].innerHTML.toLowerCase().indexOf(filter) > -1) {
                        rowContainsSearchText = true;
                        break;
                    }
                }
            }

            tr[i].style.display = rowContainsSearchText ? "" : "none";
        }
    }

    // Pie Chart configuration
    const ctx = document.getElementById('myChart');
    new Chart(ctx, {
        type: 'pie',
        data: {
            labels: ['Session', 'Cookies'],
            datasets: [{
                label: 'Total',
                data: [<%= sessionCount %>, <%= cookieCount %>],
                backgroundColor: ['green', 'blue'],
                hoverOffset: 4
            }]
        },
        options: {
            responsive: true,
            plugins: {
                legend: {
                    position: 'top',
                },
                title: {
                    display: true,
                    text: 'Live Data Overview'
                }
            }
        }
    });

    const userPassPieChart = document.getElementById('userPassPieChart');
    new Chart(userPassPieChart, {
        type: 'pie',
        data: {
            labels: ['Valid UserName', 'Valid Password', 'Both Invalid'],
            datasets: [{
                label: 'Total',
                data: [<%= validUserCount %>, <%= validPasswordCount %>, <%= invalidUserPassCount %>],
                backgroundColor: ['green', 'yellow', 'red'],
                hoverOffset: 4
            }]
        },
        options: {
            responsive: true,
            plugins: {
                legend: {
                    position: 'top',
                },
                title: {
                    display: true,
                    text: 'Live Data Overview'
                }
            }
        }
    });

    async function fetchCountryData() {
        try {
            const response = await fetch('/countryCount');
            return await response.json();
        } catch (error) {
            console.error('Error fetching country data:', error);
        }
    }

    // Map rendering logic
    am5.ready(async function () {
        const countryData = await fetchCountryData();

        // Convert country data to Highcharts format
        const data = Object.keys(countryData).map(country => {
            const parts = country.split("|");
            return {
                'id': parts[0],
                'name': parts[1],
                'value': countryData[country]
            };
        });

        var root = am5.Root.new("countryWiseIpCount");
        root.setThemes([am5themes_Animated.new(root)]);

        var chart = root.container.children.push(am5map.MapChart.new(root, {}));

        var polygonSeries = chart.series.push(
            am5map.MapPolygonSeries.new(root, {
                geoJSON: am5geodata_worldLow,
                exclude: ["AQ"]
            })
        );

        var bubbleSeries = chart.series.push(
            am5map.MapPointSeries.new(root, {
                valueField: "value",
                calculateAggregates: true,
                polygonIdField: "id"
            })
        );

        var circleTemplate = am5.Template.new({});

        bubbleSeries.bullets.push(function (root, series, dataItem) {
            var container = am5.Container.new(root, {});

            var circle = container.children.push(
                am5.Circle.new(root, {
                    radius: 10,
                    fillOpacity: 0.7,
                    fill: am5.color(0xff0000),
                    cursorOverStyle: "pointer",
                    tooltipText: `{name}: [bold]{value}[/]`
                }, circleTemplate)
            );

            var countryLabel = container.children.push(
                am5.Label.new(root, {
                    text: "{name}",
                    paddingLeft: 5,
                    populateText: true,
                    fontWeight: "bold",
                    fontSize: 13,
                    centerY: am5.p50
                })
            );

            circle.on("radius", function (radius) {
                countryLabel.set("x", radius);
            })

            return am5.Bullet.new(root, {
                sprite: container,
                dynamic: true
            });
        });

        bubbleSeries.bullets.push(function (root, series, dataItem) {
            return am5.Bullet.new(root, {
                sprite: am5.Label.new(root, {
                    text: "{value.formatNumber('#.')}",
                    fill: am5.color(0xffffff),
                    populateText: true,
                    centerX: am5.p50,
                    centerY: am5.p50,
                    textAlign: "center"
                }),
                dynamic: true
            });
        });

// minValue and maxValue must be set for the animations to work
        bubbleSeries.set("heatRules", [
            {
                target: circleTemplate,
                dataField: "value",
                min: 10,
                max: 20,
                minValue: 0,
                maxValue: 50,
                key: "radius"
            }
        ]);

        bubbleSeries.data.setAll(data);
    });
</script>
</body>

</html>
